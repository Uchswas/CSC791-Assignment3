[
    {
        "id": 118,
        "code1": "public InlineImageChunk(URL url) { super(); this.url = url; try { URLConnection urlConn = url.openConnection(); urlConn.setReadTimeout(15000); ImageInputStream iis = ImageIO.createImageInputStream(urlConn.getInputStream()); Iterator<ImageReader> readers = ImageIO.getImageReaders(iis); if (readers.hasNext()) { ImageReader reader = readers.next(); reader.setInput(iis, true); this.width = reader.getWidth(0); this.ascent = reader.getHeight(0); this.descent = 0; reader.dispose(); } else System.err.println(\"cannot read width and height of image \" + url + \" - no suitable reader!\"); } catch (Exception exc) { System.err.println(\"cannot read width and height of image \" + url + \" due to exception:\"); System.err.println(exc); exc.printStackTrace(System.err); } }",
        "code2": "private void readFromObjectInput(String filename) { try { URL url = new URL(getCodeBase(), filename); InputStream stream = url.openStream(); ObjectInput input = new ObjectInputStream(stream); fDrawing.release(); fDrawing = (Drawing) input.readObject(); view().setDrawing(fDrawing); } catch (IOException e) { initDrawing(); showStatus(\"Error: \" + e); } catch (ClassNotFoundException e) { initDrawing(); showStatus(\"Class not found: \" + e); } }"
    },
    {
        "id": 119,
        "code1": "public String digestResponse() { String digest = null; if (null == nonce) return null; try { MessageDigest md = MessageDigest.getInstance(\"MD5\"); md.update(username.getBytes()); md.update(\":\".getBytes()); md.update(realm.getBytes()); md.update(\":\".getBytes()); md.update(password.getBytes()); byte[] d = md.digest(); if (null != algorithm && -1 != (algorithm.toLowerCase()).indexOf(\"md5-sess\")) { md = MessageDigest.getInstance(\"MD5\"); md.update(d); md.update(\":\".getBytes()); md.update(nonce.getBytes()); md.update(\":\".getBytes()); md.update(cnonce.getBytes()); d = md.digest(); } byte[] a1 = bytesToHex(d); md = MessageDigest.getInstance(\"MD5\"); md.update(method.getBytes()); md.update(\":\".getBytes()); md.update(uri.getBytes()); d = md.digest(); byte[] a2 = bytesToHex(d); md = MessageDigest.getInstance(\"MD5\"); md.update(a1); md.update(\":\".getBytes()); md.update(nonce.getBytes()); md.update(\":\".getBytes()); if (null != qop) { md.update(nonceCount.getBytes()); md.update(\":\".getBytes()); md.update(cnonce.getBytes()); md.update(\":\".getBytes()); md.update(qop.getBytes()); md.update(\":\".getBytes()); } md.update(a2); d = md.digest(); byte[] r = bytesToHex(d); digest = new String(r); } catch (Exception e) { e.printStackTrace(); } return digest; }",
        "code2": "public static void concatenateToDestFile(File sourceFile, File destFile) throws IOException { if (!destFile.exists()) { if (!destFile.createNewFile()) { throw new IllegalArgumentException(\"Could not create destination file:\" + destFile.getName()); } } BufferedOutputStream bufferedOutputStream = null; BufferedInputStream bufferedInputStream = null; byte[] buffer = new byte[1024]; try { bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(destFile, true)); bufferedInputStream = new BufferedInputStream(new FileInputStream(sourceFile)); while (true) { int readByte = bufferedInputStream.read(buffer, 0, buffer.length); if (readByte == -1) { break; } bufferedOutputStream.write(buffer, 0, readByte); } } finally { if (bufferedOutputStream != null) { bufferedOutputStream.close(); } if (bufferedInputStream != null) { bufferedInputStream.close(); } } }"
    },
    {
        "id": 120,
        "code1": "private static void readAndRewrite(File inFile, File outFile) throws IOException { ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile))); DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis); Dataset ds = DcmObjectFactory.getInstance().newDataset(); dcmParser.setDcmHandler(ds.getDcmHandler()); dcmParser.parseDcmFile(null, Tags.PixelData); PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR()); System.out.println(\"reading \" + inFile + \"...\"); pdReader.readPixelData(false); ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile))); DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE; ds.writeDataset(out, dcmEncParam); ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength()); System.out.println(\"writing \" + outFile + \"...\"); PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR()); pdWriter.writePixelData(); out.flush(); out.close(); System.out.println(\"done!\"); }",
        "code2": "private static void readAndRewrite(File inFile, File outFile) throws IOException { ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile))); DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis); Dataset ds = DcmObjectFactory.getInstance().newDataset(); dcmParser.setDcmHandler(ds.getDcmHandler()); dcmParser.parseDcmFile(null, Tags.PixelData); PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR()); System.out.println(\"reading \" + inFile + \"...\"); pdReader.readPixelData(false); ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile))); DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE; ds.writeDataset(out, dcmEncParam); ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength()); System.out.println(\"writing \" + outFile + \"...\"); PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR()); pdWriter.writePixelData(); out.flush(); out.close(); System.out.println(\"done!\"); }"
    },
    {
        "id": 121,
        "code1": "public static boolean decodeFileToFile(String infile, String outfile) { boolean success = false; java.io.InputStream in = null; java.io.OutputStream out = null; try { in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE); out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile)); byte[] buffer = new byte[65536]; int read = -1; while ((read = in.read(buffer)) >= 0) { out.write(buffer, 0, read); } success = true; } catch (java.io.IOException exc) { exc.printStackTrace(); } finally { try { in.close(); } catch (Exception exc) { } try { out.close(); } catch (Exception exc) { } } return success; }",
        "code2": "public boolean copier(String source, String nomFichierSource, java.io.File destination) { boolean resultat = false; OutputStream tmpOut; try { tmpOut = new BufferedOutputStream(new FileOutputStream(nomFichierSource + \"001.tmp\")); InputStream is = getClass().getResourceAsStream(source + nomFichierSource); int i; while ((i = is.read()) != -1) tmpOut.write(i); tmpOut.close(); is.close(); } catch (IOException ex) { ex.printStackTrace(); } FileChannel in = null; FileChannel out = null; try { in = new FileInputStream(new File(nomFichierSource + \"001.tmp\")).getChannel(); out = new FileOutputStream(destination).getChannel(); in.transferTo(0, in.size(), out); resultat = true; } catch (java.io.FileNotFoundException f) { } catch (java.io.IOException e) { } finally { if (in != null) { try { in.close(); } catch (IOException e) { } } if (out != null) { try { out.close(); } catch (IOException e) { } } } new File(nomFichierSource + \"001.tmp\").delete(); return (resultat); }"
    },
    {
        "id": 122,
        "code1": "public User createUser(Map userData) throws HamboFatalException { DBConnection con = null; try { con = DBServiceManager.allocateConnection(); con.setAutoCommit(false); String userId = (String) userData.get(HamboUser.USER_ID); String sql = \"insert into user_UserAccount \" + \"(userid,firstname,lastname,street,zipcode,city,\" + \"province,country,email,cellph,gender,password,\" + \"language,timezn,birthday,datecreated,lastlogin,\" + \"disabled,wapsigned,ldapInSync,offerings,firstcb) \" + \"values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"; PreparedStatement ps = con.prepareStatement(sql); ps.setString(1, userId); ps.setString(2, (String) userData.get(HamboUser.FIRST_NAME)); ps.setString(3, (String) userData.get(HamboUser.LAST_NAME)); ps.setString(4, (String) userData.get(HamboUser.STREET_ADDRESS)); ps.setString(5, (String) userData.get(HamboUser.ZIP_CODE)); ps.setString(6, (String) userData.get(HamboUser.CITY)); ps.setString(7, (String) userData.get(HamboUser.STATE)); ps.setString(8, (String) userData.get(HamboUser.COUNTRY)); ps.setString(9, (String) userData.get(HamboUser.EXTERNAL_EMAIL_ADDRESS)); ps.setString(10, (String) userData.get(HamboUser.MOBILE_NUMBER)); ps.setString(11, (String) userData.get(HamboUser.GENDER)); ps.setString(12, (String) userData.get(HamboUser.PASSWORD)); ps.setString(13, (String) userData.get(HamboUser.LANGUAGE)); ps.setString(14, (String) userData.get(HamboUser.TIME_ZONE)); java.sql.Date date = (java.sql.Date) userData.get(HamboUser.BIRTHDAY); if (date != null) ps.setDate(15, date); else ps.setNull(15, Types.DATE); date = (java.sql.Date) userData.get(HamboUser.CREATED); if (date != null) ps.setDate(16, date); else ps.setNull(16, Types.DATE); date = (java.sql.Date) userData.get(HamboUser.LAST_LOGIN); if (date != null) ps.setDate(17, date); else ps.setNull(17, Types.DATE); Boolean bool = (Boolean) userData.get(HamboUser.DISABLED); if (bool != null) ps.setBoolean(18, bool.booleanValue()); else ps.setBoolean(18, UserAccountInfo.DEFAULT_DISABLED); bool = (Boolean) userData.get(HamboUser.WAP_ACCOUNT); if (bool != null) ps.setBoolean(19, bool.booleanValue()); else ps.setBoolean(19, UserAccountInfo.DEFAULT_WAP_ACCOUNT); bool = (Boolean) userData.get(HamboUser.LDAP_IN_SYNC); if (bool != null) ps.setBoolean(20, bool.booleanValue()); else ps.setBoolean(20, UserAccountInfo.DEFAULT_LDAP_IN_SYNC); bool = (Boolean) userData.get(HamboUser.OFFERINGS); if (bool != null) ps.setBoolean(21, bool.booleanValue()); else ps.setBoolean(21, UserAccountInfo.DEFAULT_OFFERINGS); ps.setString(22, (String) userData.get(HamboUser.COBRANDING_ID)); con.executeUpdate(ps, null); ps = con.prepareStatement(DBUtil.getQueryCurrentOID(con, \"user_UserAccount\", \"newoid\")); ResultSet rs = con.executeQuery(ps, null); if (rs.next()) { OID newOID = new OID(rs.getBigDecimal(\"newoid\").doubleValue()); userData.put(HamboUser.OID, newOID); } con.commit(); } catch (Exception ex) { if (con != null) try { con.rollback(); } catch (SQLException sqlex) { } throw new HamboFatalException(MSG_INSERT_FAILED, ex); } finally { if (con != null) try { con.reset(); } catch (SQLException ex) { } if (con != null) con.release(); } return buildUser(userData); }",
        "code2": "@Override public void connect() throws IOException { URL url = getLocator().getURL(); if (url.getProtocol().equals(\"file\")) { final String newUrlStr = URLUtils.createAbsoluteFileUrl(url.toExternalForm()); if (newUrlStr != null) { if (!newUrlStr.toString().equals(url.toExternalForm())) { logger.warning(\"Changing file URL to absolute for URL.openConnection, from \" + url.toExternalForm() + \" to \" + newUrlStr); url = new URL(newUrlStr); } } } conn = url.openConnection(); if (!url.getProtocol().equals(\"ftp\") && conn.getURL().getProtocol().equals(\"ftp\")) { logger.warning(\"URL.openConnection() morphed \" + url + \" to \" + conn.getURL()); throw new IOException(\"URL.openConnection() returned an FTP connection for a non-ftp url: \" + url); } if (conn instanceof HttpURLConnection) { final HttpURLConnection huc = (HttpURLConnection) conn; huc.connect(); final int code = huc.getResponseCode(); if (!(code >= 200 && code < 300)) { huc.disconnect(); throw new IOException(\"HTTP response code: \" + code); } logger.finer(\"URL: \" + url); logger.finer(\"Response code: \" + code); logger.finer(\"Full content type: \" + conn.getContentType()); boolean contentTypeSet = false; if (stripTrailer(conn.getContentType()).equals(\"text/plain\")) { final String ext = PathUtils.extractExtension(url.getPath()); if (ext != null) { final String result = MimeManager.getMimeType(ext); if (result != null) { contentTypeStr = ContentDescriptor.mimeTypeToPackageName(result); contentTypeSet = true; logger.fine(\"Received content type \" + conn.getContentType() + \"; overriding based on extension, to: \" + result); } } } if (!contentTypeSet) contentTypeStr = ContentDescriptor.mimeTypeToPackageName(stripTrailer(conn.getContentType())); } else { conn.connect(); contentTypeStr = ContentDescriptor.mimeTypeToPackageName(conn.getContentType()); } contentType = new ContentDescriptor(contentTypeStr); sources = new URLSourceStream[1]; sources[0] = new URLSourceStream(); connected = true; }"
    }
]
